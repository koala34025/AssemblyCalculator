#include stdio.h
#include stdlib.h
#include string.h
#include ctype.h
#define MAXLEN 256
 Set PRINTERR to 1 to print error message while calling error()
 Make sure you set PRINTERR to 0 before you submit your code
#define PRINTERR 0

 Call this macro to print error message and exit the program
 This will also print where you called it in your program
#define error(errorNum) { 
    if (PRINTERR) 
        fprintf(stderr, error() called at %s%d , __FILE__, __LINE__); 
    err(errorNum); 
}
 Error types
typedef enum {
    UNDEFINED, MISPAREN, NOTNUMID, NOTFOUND, RUNOUT, NOTLVAL, DIVZERO, SYNTAXERR, INVANAME
} ErrorType;
#include lex.h
#include parser.h

 This package is a calculator
 It works like a Python interpretor
 Example
  y = 2
  z = 2
  x = 3  y + 4  (2  z)
 It will print the answer of every line
 You should turn it into an expression compiler
 And print the assembly code according to the input

 This is the grammar used in this package
 You can modify it according to the spec and the slide
 statement  =  ENDFILE  END  expr END
 expr    	  =  term expr_tail
 expr_tail  =  ADDSUB term expr_tail  NiL
 term 	  =  factor term_tail
 term_tail  =  MULDIV factor term_tail NiL
 factor	  =  INT  ADDSUB INT 
		   	      ID   ADDSUB ID  
		   	      ID ASSIGN expr 
		   	      LPAREN expr RPAREN 
		   	      ADDSUB LPAREN expr RPAREN

int main() {
    freopen(input.txt, w, stdout);
    initTable();
    printf( );
    while (1) {
        statement();
    }
    return 0;
}

#ifndef __LEX__
#define __LEX__


 Token types
typedef enum {
    UNKNOWN, END, ENDFILE,
    INT, ID,
    ADDSUB, MULDIV,
    ASSIGN,
    LPAREN, RPAREN,
    INCDEC,
    AND, OR, XOR
} TokenSet;

 Test if a token matches the current token
extern int match(TokenSet token);

 Get the next token
extern void advance(void);

 Get the lexeme of the current token
extern char getLexeme(void);

#endif  __LEX__

#define _CRT_SECURE_NO_WARNINGS

#include stdio.h
#include string.h
#include ctype.h
#include lex.h
#include parser.h

static TokenSet getToken(void);
static TokenSet curToken = UNKNOWN;
static char lexeme[MAXLEN];

TokenSet getToken(void)
{
    int i = 0;
    char c = '0';

    while ((c = fgetc(stdin)) == ' '  c == 't');

    if (isdigit(c)) {
        lexeme[0] = c;
        c = fgetc(stdin);
        i = 1;
        while (isdigit(c) && i  MAXLEN) {
            lexeme[i] = c;
            ++i;
            c = fgetc(stdin);
        }
         TODO
         handle invalid variable names, e.g., 1_Var
        if (isalpha(c)  c == '_') {
            error(INVANAME);
        }
        ungetc(c, stdin);
        lexeme[i] = '0';
        return INT;
    }
    
    else if (c == '+'  c == '-') {
        lexeme[0] = c;
        lexeme[1] = '0';
        return ADDSUB;
    }
    

     determine ADDSUB or INCDEC
    else if (c == '+') {
        lexeme[0] = c;
        c = fgetc(stdin);
        if (c == '+') {
            lexeme[1] = c;
            lexeme[2] = '0';
            return INCDEC;
        }
        else {
            lexeme[1] = '0';
            ungetc(c, stdin);
            return ADDSUB;
        }
    }
    else if (c == '-') {
        lexeme[0] = c;
        c = fgetc(stdin);
        if (c == '-') {
            lexeme[1] = c;
            lexeme[2] = '0';
            return INCDEC;
        }
        else {
            lexeme[1] = '0';
            ungetc(c, stdin);
            return ADDSUB;
        }
    }

    else if (c == ''  c == '') {
        lexeme[0] = c;
        lexeme[1] = '0';
        return MULDIV;
    } else if (c == 'n') {
        lexeme[0] = '0';
        return END;
    } else if (c == '=') {
        strcpy(lexeme, =);
        return ASSIGN;
    } else if (c == '(') {
        strcpy(lexeme, ();
        return LPAREN;
    } else if (c == ')') {
        strcpy(lexeme, ));
        return RPAREN;
    } else if (isalpha(c)  c == '_') {

         handle arbitrary variable names, e.g., Var_1
        lexeme[0] = c;
        c = fgetc(stdin);
        i = 1;
        while ((isalpha(c)  isdigit(c)  c == '_') && i  MAXLEN) {
            lexeme[i] = c;
            i++;
            c = fgetc(stdin);
        }
        ungetc(c, stdin);
        lexeme[1] = '0';
        lexeme[i] = '0';
        return ID;

    } else if (c == EOF) {
        return ENDFILE;
    }

    else if (c == '&') {
        strcpy(lexeme, &);
        return AND;
    }
    else if (c == '') {
        strcpy(lexeme, );
        return OR;
    }
    else if (c == '^') {
        strcpy(lexeme, ^);
        return XOR;
    }

    else {
        return UNKNOWN;
    }
}

void advance(void) {
    curToken = getToken();
}

int match(TokenSet token) {
    if (curToken == UNKNOWN)
        advance();
    return token == curToken;
}

char getLexeme(void) {
    return lexeme;
}

#ifndef __PARSER__
#define __PARSER__

#include lex.h
#define TBLSIZE 64





 Structure of the symbol table
typedef struct {
    int val;
    char name[MAXLEN];
} Symbol;

 Structure of a tree node
typedef struct _Node {
    TokenSet data;
    int val;
    char lexeme[MAXLEN];
    struct _Node left;
    struct _Node right;
} BTNode;

 The symbol table
extern Symbol table[TBLSIZE];

 Initialize the symbol table with builtin variables
extern void initTable(void);

 Get the value of a variable
extern int getval(char str);

 Set the value of a variable
extern int setval(char str, int val);


extern int existVar(char str);

 Make a new node according to token type and lexeme
extern BTNode makeNode(TokenSet tok, const char lexe);

 Free the syntax tree
extern void freeTree(BTNode root);


extern BTNode factor(void);
extern BTNode term(void);
extern BTNode term_tail(BTNode left);
extern BTNode expr(void);
extern BTNode expr_tail(BTNode left);
extern void statement(void);


 Complete grammer
extern void statement(void);
extern BTNode assign_expr(void);
extern BTNode or_expr(void);
extern BTNode or_expr_tail(BTNode left);
extern BTNode xor_expr(void);
extern BTNode xor_expr_tail(BTNode left);
extern BTNode and_expr(void);
extern BTNode and_expr_tail(BTNode left);
extern BTNode addsub_expr(void);
extern BTNode addsub_expr_tail(BTNode left);
extern BTNode muldiv_expr(void);
extern BTNode muldiv_expr_tail(BTNode left);
extern BTNode unary_expr(void);
extern BTNode factor(void);

 Print error message and exit the program
extern void err(ErrorType errorNum);

#endif  __PARSER__

#define _CRT_SECURE_NO_WARNINGS

#include stdio.h
#include stdlib.h
#include string.h
#include parser.h
#include codeGen.h

int sbcount = 0;
Symbol table[TBLSIZE];
extern int top;

void initTable(void) {
    
    strcpy(table[0].name, x);
    table[0].val = 0;
    strcpy(table[1].name, y);
    table[1].val = 0;
    strcpy(table[2].name, z);
    table[2].val = 0;
    sbcount = 3;
    
    setval(x, 0);
    setval(y, 0);
    setval(z, 0);
}

int getval(char str) {
    int i = 0;

    for (i = 0; i  sbcount; i++)
        if (strcmp(str, table[i].name) == 0)
            return table[i].val;

    if (sbcount = TBLSIZE)
        error(RUNOUT);

    strcpy(table[sbcount].name, str);
    table[sbcount].val = 0;
    sbcount++;
    return 0;

}

int setval(char str, int val) {
    int i = 0;

    for (i = 0; i  sbcount; i++) {
        if (strcmp(str, table[i].name) == 0) {
            table[i].val = val;
            return val;
        }
    }

    if (sbcount = TBLSIZE)
        error(RUNOUT);

    strcpy(table[sbcount].name, str);
    table[sbcount].val = val;
    sbcount++;
    return val;
}

int existVar(char str) {
    int i = 0;

    for (i = 0; i  sbcount; i++)
        if (strcmp(str, table[i].name) == 0)
            return i;

    if (sbcount = TBLSIZE)
        error(RUNOUT);

    return -1;
}

BTNode makeNode(TokenSet tok, const char lexe) {
    BTNode node = (BTNode)malloc(sizeof(BTNode));
    strcpy(node-lexeme, lexe);
    node-data = tok;
    node-val = 0;
    node-left = NULL;
    node-right = NULL;
    return node;
}

void freeTree(BTNode root) {
    if (root != NULL) {
        freeTree(root-left);
        freeTree(root-right);
        free(root);
    }
}

 Complete grammar

 statement = END  assign_expr END
extern void statement(void) {
    BTNode retp = NULL;

    if (match(ENDFILE)) {
            for(int i=3; i10; i++){
                printf(MOV r%d [%d]n, i-3, i4);
            }
            exit(0);
        printf(MOV r0 [0]nMOV r1 [4]nMOV r2 [8]nEXIT 0n);
        exit(0);
    }
    else if (match(END)) {
        printf( );
        advance();
    }
    else {
        retp = assign_expr();
        if (match(END)) {
            top = -1;
            evaluateTree(retp);
            printf(%dn, evaluateTree(retp));
            printf(Prefix traversal );
            printPrefix(retp);
            printf(n);
            freeTree(retp);
            printf( );
            advance();
        }
        else {
            printf(Prefix traversal );
            printPrefix(retp);
            printf(n);
            freeTree(retp);
            for (int i = 0; i  8; i++) {
                if (match(i)) {
                    printf(TokenSet %dn, i);
                    break;
                }
            }
            error(SYNTAXERR);
        }
    }
}

 assign_expr = ID ASSIGN assign_expr  or_expr
 assign_expr = or_expr  ID ASSIGN assign_expr
 since match(ID) is seperated in two function (not like the thing in package code),
 so we have to directly determine whether it is an or_expr or an ID ASSIGN assign_expr

extern BTNode assign_expr(void) {
    BTNode retp = NULL,  left = NULL;

    if (match(ID)) {
        left = or_expr();
        if (left-data == ID && match(ASSIGN)) {
            retp = makeNode(ASSIGN, getLexeme());
            advance();
            retp-left = left;
            retp-right = assign_expr();
        }
        else {
            retp = left;
        }
    }
    else {
        retp = or_expr();
    }
    return retp;
}

 or_expr = xor_expr or_expr_tail
extern BTNode or_expr(void) {
    BTNode node = xor_expr();
    return or_expr_tail(node);
}

 or_expr_tail = OR xor_expr or_expr_tail  NiL
extern BTNode or_expr_tail(BTNode left) {
    BTNode node = NULL;

    if (match(OR)) {
        node = makeNode(OR, getLexeme());
        advance();
        node-left = left;
        node-right = xor_expr();
        return or_expr_tail(node);
    }
    else {
        return left;
    }
}

 xor_expr = and_expr xor_expr_tail
extern BTNode xor_expr(void) {
    BTNode node = and_expr();
    return xor_expr_tail(node);
}

 xor_expr_tail = XOR and_expr xor_expr_tail  NiL
extern BTNode xor_expr_tail(BTNode left) {
    BTNode node = NULL;

    if (match(XOR)) {
        node = makeNode(XOR, getLexeme());
        advance();
        node-left = left;
        node-right = and_expr();
        return xor_expr_tail(node);
    }
    else {
        return left;
    }
}

 and_expr = addsub_expr and_expr_tail
extern BTNode and_expr(void) {
    BTNode node = addsub_expr();
    return and_expr_tail(node);
}

 and_expr_tail = AND addsub_expr and_expr_tail  NiL
extern BTNode and_expr_tail(BTNode left) {
    BTNode node = NULL;

    if (match(AND)) {
        node = makeNode(AND, getLexeme());
        advance();
        node-left = left;
        node-right = addsub_expr();
        return and_expr_tail(node);
    }
    else {
        return left;
    }
}

 addsub_expr = muldiv_expr addsub_expr_tail
extern BTNode addsub_expr(void) {
    BTNode node = muldiv_expr();
    return addsub_expr_tail(node);
}

 addsub_expr_tail = ADDSUB muldiv_expr addsub_expr_tail  NiL
extern BTNode addsub_expr_tail(BTNode left) {
    BTNode node = NULL;

    if (match(ADDSUB)) {
        node = makeNode(ADDSUB, getLexeme());
        advance();
        node-left = left;
        node-right = muldiv_expr();
        return addsub_expr_tail(node);
    }
    else {
        return left;
    }
}

 muldiv_expr = unary_expr muldiv_expr_tail
extern BTNode muldiv_expr(void) {
    BTNode node = unary_expr();
    return muldiv_expr_tail(node);
}

 muldiv_expr_tail = MULDIV unary_expr muldiv_expr_tail  NiL
extern BTNode muldiv_expr_tail(BTNode left) {
    BTNode node = NULL;

    if (match(MULDIV)) {
        node = makeNode(MULDIV, getLexeme());
        advance();
        node-left = left;
        node-right = unary_expr();
        return muldiv_expr_tail(node);
    }
    else {
        return left;
    }
}

 unary_expr = ADDSUB unary_expr  factor
extern BTNode unary_expr(void) {
    BTNode retp = NULL;

    if (match(ADDSUB)) {
        retp = makeNode(ADDSUB, getLexeme());
        advance();
        retp-left = makeNode(INT, 0);
        retp-right = unary_expr();
    }
    else {
        retp = factor();
    }
    return retp;
}

 factor = INT  ID  INCDEC ID  LPAREN assign_expr RPAREN
extern BTNode factor(void) {
    BTNode retp = NULL, left = NULL;

    if (match(INT)) {
        retp = makeNode(INT, getLexeme());
        advance();
    } else if (match(ID)) {
        retp = makeNode(ID, getLexeme());
        advance();
    } else if (match(INCDEC)) {
        retp = makeNode(INCDEC, getLexeme());
        retp-left = makeNode(INT, 1);  TODO (think...)
        advance();
        if (match(ID)) {
            retp-right = makeNode(ID, getLexeme());
            advance();
        } else {
            error(NOTNUMID);
        }
    } else if (match(LPAREN)) {
        advance();
        retp = assign_expr();
        if (match(RPAREN))
            advance();
        else
            error(MISPAREN);
    } else {
        for (int i = 0; i  8; i++) {
            if (match(i)) {
                printf(TokenSet %dn, i);
                break;
            }
        }
        error(NOTNUMID);
    }
    return retp;
}

void err(ErrorType errorNum) {
    if (PRINTERR) {
        fprintf(stderr, error );
        switch (errorNum) {
            case MISPAREN
                fprintf(stderr, mismatched parenthesisn);
                break;
            case NOTNUMID
                fprintf(stderr, number or identifier expectedn);
                break;
            case NOTFOUND
                fprintf(stderr, variable not definedn);
                break;
            case RUNOUT
                fprintf(stderr, out of memoryn);
                break;
            case NOTLVAL
                fprintf(stderr, lvalue required as an operandn);
                break;
            case DIVZERO
                fprintf(stderr, divide by constant zeron);
                break;
            case SYNTAXERR
                fprintf(stderr, syntax errorn);
                break;
            case INVANAME
                fprintf(stderr, invalid variable namen);
                break;
            default
                fprintf(stderr, undefined errorn);
                break;
        }
    }
    printf(EXIT 1n);
    exit(0);
}

#ifndef __CODEGEN__
#define __CODEGEN__

#include parser.h

 Evaluate the syntax tree
extern int evaluateTree(BTNode root);


extern int VarInRight(BTNode root);

 Print the syntax tree in prefix
extern void printPrefix(BTNode root);

extern void printInfix(BTNode root);
extern void printPostfix(BTNode root);

#endif  __CODEGEN__

#define _CRT_SECURE_NO_WARNINGS

#include stdio.h
#include stdlib.h
#include string.h
#include codeGen.h

int r[8];
int top;

int push(int data) {
    if (top = 8)
        printf(r[] is full, push nothingn);
    else
        r[++top] = data;
}

int peek() {
    if (isEmpty())
        printf(r[] is empty, peek nothingn);
    else
        return r[top];
}

int pop() {
    if (isEmpty())
        printf(r[] is empty, pop nothingn);
    else
        r[top--] = 0;
}

int isEmpty() {
    if (top == -1)
        return 1;
    else
        return 0;
}


int VarInRight(BTNode root) {
    if (!root)
        return 0;

    if (root-data == ID)
        return 1;

    return (VarInRight(root-left)  VarInRight(root-right));
}

int evaluateTree(BTNode root) {
    int retval = 0, lv = 0, rv = 0;

    if (root != NULL) {
        switch (root-data) {
            case ID                                         called by evaluateTree(root-right)
                if (existVar(root-lexeme) == -1) {               first appears than instantly know its wrong
                    if (match(ASSIGN))
                        retval = getval(root-lexeme);
                    else
                    error(NOTFOUND);
                }
                else {
                    retval = getval(root-lexeme);
                    push(retval);
                    printf(MOV r%d [%d]n, top, existVar(root-lexeme)  4);
                }
                break;
            case INT
                retval = atoi(root-lexeme);
                push(retval);
                printf(MOV r%d %dn, top, retval);
                break;
            case ASSIGN  mem[]
                rv = evaluateTree(root-right);              since LVAL must be variable, setval straightly
                retval = setval(root-left-lexeme, rv);     otherwise in case ID, it checks existVar();
                printf(MOV [%d] r%dn, existVar(root-left-lexeme)  4, top);
                break;
            case ADDSUB
            case MULDIV
                lv = evaluateTree(root-left);
                rv = evaluateTree(root-right);
                if (strcmp(root-lexeme, +) == 0) {
                    retval = lv + rv;
                } else if (strcmp(root-lexeme, -) == 0) {
                    retval = lv - rv;
                } else if (strcmp(root-lexeme, ) == 0) {
                    retval = lv  rv;
                } else if (strcmp(root-lexeme, ) == 0) {
                    if (rv == 0) {
                        if (!VarInRight(root-right))
                            error(DIVZERO)
                        else
                            retval = 0;
                    }
                    else {
                        retval = lv  rv;
                    }
                }
                pop();
                pop();
                push(retval);
                if (strcmp(root-lexeme, +) == 0) {
                    printf(ADD r%d r%dn, top, top + 1);
                }
                else if (strcmp(root-lexeme, -) == 0) {
                    printf(SUB r%d r%dn, top, top + 1);
                }
                else if (strcmp(root-lexeme, ) == 0) {
                    printf(MUL r%d r%dn, top, top + 1);
                }
                else if (strcmp(root-lexeme, ) == 0) {
                    printf(DIV r%d r%dn, top, top + 1);
                }
                break;

            case INCDEC
                lv = evaluateTree(root-left);
                rv = evaluateTree(root-right);
                lv = evaluateTree(root-left);
                if (strcmp(root-lexeme, ++) == 0) {
                    retval = setval(root-right-lexeme, 1 + rv);
                }
                else if (strcmp(root-lexeme, --) == 0) {
                    retval = setval(root-right-lexeme, -1 + rv);
                }
                pop();
                pop();
                push(retval);
                printf(%s r%d r%dn, strcmp(root-lexeme, ++) == 0  ADD  SUB, top, top + 1);
                printf(MOV [%d] r%dn, existVar(root-right-lexeme)  4, top);
                break;
            case AND case OR case XOR
                lv = evaluateTree(root-left);
                rv = evaluateTree(root-right);
                if (strcmp(root-lexeme, &) == 0) {
                    retval = lv & rv;
                }
                else if (strcmp(root-lexeme, ) == 0) {
                    retval = lv  rv;
                }
                else if (strcmp(root-lexeme, ^) == 0) {
                    retval = lv ^ rv;
                }
                pop();
                pop();
                push(retval);
                if (strcmp(root-lexeme, &) == 0) {
                    printf(AND r%d r%dn, top, top + 1);
                }
                else if (strcmp(root-lexeme, ) == 0) {
                    printf(OR r%d r%dn, top, top + 1);
                }
                else if (strcmp(root-lexeme, ^) == 0) {
                    printf(XOR r%d r%dn, top, top + 1);
                }
                break;

            default
                retval = 0;
        }
    }
    return retval;
}

void printPrefix(BTNode root) {
    if (root != NULL) {
        printf(%s , root-lexeme);
        printPrefix(root-left);
        printPrefix(root-right);
    }
}
void printInfix(BTNode root) {
    if (root != NULL) {
        printInfix(root-left);
        printf(%s , root-lexeme);
        printInfix(root-right);
    }
}

void printPostfix(BTNode root) {
    if (root != NULL) {
        printPostfix(root-left);
        printPostfix(root-right);
        printf(%s , root-lexeme);
    }
}
